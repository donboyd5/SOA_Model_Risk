---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Stochastic log volatility

## AIRG documentation and reported results

### Documents

**This is the key document:**

“Recommended Approach for Setting Regulatory Risk-Based Capital Requirements for Variable Annuities and Similar Products Presented by the American Academy of Actuaries’ Life Capital Adequacy Subcommittee to the National Association of Insurance Commissioners’ Capital Adequacy Task Force.” American Academy of Actuaries, June 2005. <https://www.actuary.org/sites/default/files/pdf/life/c3_june05.pdf>.

![](images/clipboard-2233928360.png)

Also useful:

“C3 Phase II Risk-Based Capital for Variable Annuities: Pre-Packaged Scenarios:  Presented by the American Academy of Actuaries’ Life Capital Adequacy Subcommittees’ C-3 Phase 2 Work Group to the National Association of Insurance Commissioners’ Capital Adequacy Task Force.” American Academy of Actuaries, March 2005. <https://www.actuary.org/sites/default/files/pdf/life/c3supp_march05.pdf>.

### AIRG parameters

![](images/clipboard-1062302077.png)

![](images/clipboard-239653750.png)

### AIRG SLV equations

![](images/clipboard-325100188.png)

## Setup

```{r}
#| label: setup
#| output: false

source(here::here("report", "_common.R"))
source(here::here("report", "libraries_ts.R"))


library(quantmod)
library(stats4)
library(stochvolTMB)
library(stochvol)

# options(pillar.sigfig = 3) # default
options(pillar.print_max = 20)
tprint <- 25  # default tibble print
options(tibble.print_max = tprint, tibble.print_min = tprint) # show up to tprint rows


# library(rstan)
# library(V8)
# options(mc.cores = parallel::detectCores())
# rstan_options(auto_write = TRUE) # avoids recompiling

```

## Get and show main ACLI parameters

```{r}
#| label: get-params

# ddir <- r"(E:\data\soa\acli)"
# base_dir <- "s_baseline"
# base_fn <- "baseline_ACLI_v1.46 Alt3 12-2020 100yrs.xlsm"

fpath <- fs::path(ddir, base_dir, base_fn)

## equity parameters ----

eqparams1 <- read_excel(fpath, sheet="Parameters", range = "H32:M44")

eqparams <- eqparams1 |> 
  select(symbol=1, usdiverse=2, intldiverse=3, intermedrisk=4, aggressive=5, desc=6) |> 
  filter(row_number() > 1) |> 
  mutate(across(-c(symbol, desc), as.numeric)) |> 
  mutate(vname=case_when(
    symbol == "sigma(v)" ~ "sigma_v",
    symbol == "sigma(0)" ~ "sigma_0",
    symbol == "sigma-" ~ "sigma_min",
    symbol == "sigma+" ~ "sigma_max",
    symbol == "sigma*" ~ "sigma_star",
    .default = symbol)
    ) |> 
  relocate(vname, .before = desc)
eqparams  

# col_types = cols(.default = col_character())

## interest rate parameters ----

intparams1 <- read_excel(fpath, sheet="Parameters", range = "B2:F39")

intparams <- intparams1 |> 
  select(vname=1, default=3, desc=5) |> 
  filter(row_number() > 1) |> 
  mutate(default = as.numeric(default))

intparams

```

## Get data

AIRG used the following data. ACLI used the same data as AIRG for equities.

![](images/clipboard-736643218.png)

```{r}
#| label: download-sp500
#| eval: false

# Here are the data sources for AIRG:

# Asset Class, Market Proxies, Historic Period
# Money Market, 3 Month Treasury returns, 1955.12 – 2003.12
# U.S. ITGVT, U.S. Intermediate Term Government Bonds, 1955.12 – 2003.12
# U.S. LTCORP, U.S. Long Term Corporate Bonds, 1955.12 – 2003.12
# Fixed Income, 65% ITGVT + 35% LTCORP, n/a
# Balanced Allocation, 60% Diversified Equity + 40% Fixed Income, n/a
# Diversified Large Cap U.S. Equity, S&P500 Total Return Index, 1955.12 – 2003.12
# Diversified International Equity, MSCI-EAFE $USD Total Return Index, 1969.12 – 2003.12
# Intermediate Risk Equity, U.S. Small Capitalization Index, 1955.12 – 2003.12
# Aggressive Equity, Emerging Markets, NASDAQ, Hang Seng, 1984.12 – 2003.12

# re-download if needed -- src = "yahoo" by default
# Yahoo symbol lookup:
# https://finance.yahoo.com/lookup

## Diversified Large Cap U.S. Equity ----
# Dec 1955-Dec 2003 monthly was period used in AIRG for sp500
# Download adjusted close prices for the S&P 500 index
# monthly data do not go back far enough so get daily and convert
spdaily <- getSymbols("^GSPC", auto.assign = FALSE, from = "1950-01-01")
saveRDS(spdaily, here::here("data", "sp500_index_rawdaily.rds"))

## Diversified International Equity ----
# MSCI-EAFE $USD Total Return Index, 1969.12 – 2003.12
# MSCI EAFE (Europe, Australasia and Far East) Index - This is a broad index that represents the performance of large and mid-cap stocks across 21 developed markets, excluding the U.S. and Canada. It covers approximately 85% of the free float-adjusted market capitalization in each country.
# The MSCI EAFE Index itself does not have a ticker symbol, as it is not an investable security but rather a benchmark index. However, there are several exchange-traded funds (ETFs) and mutual funds that track the performance of the MSCI EAFE Index.
# https://www.msci.com/documents/10199/822e3d18-16fb-4d23-9295-11bc9e07b8ba
# The most popular and widely traded ETF that tracks the MSCI EAFE Index is the iShares MSCI EAFE ETF, which has the ticker symbol "EFA". It's only available since 2001.

mscidaily <- getSymbols("EFA", auto.assign = FALSE, from = "1950-01-01") # 2001+
saveRDS(mscidaily, here::here("data", "msci_eafe_eaf_rawdaily.rds"))

## Intermediate Risk Equity, U.S. Small Capitalization Index, 1955.12 – 2003.12 ----
# U.S. Small Capitalization Index

# The Russell 2000 is perhaps the most well-known and widely referenced small-cap index in the U.S. It measures the performance of the smallest 2,000 companies included in the Russell 3000 Index, which represents approximately 10% of the total market capitalization of the Russell 3000.
# ^RUT only available from 1987-09-10 forward

# The S&P SmallCap 600 is another prominent index that measures the small-cap
# segment of the U.S. equity market. Managed by Standard & Poor's, it includes
# 600 small companies that meet specific inclusion criteria, such as market
# capitalization, liquidity, and financial viability.

r2000daily <- getSymbols("^RUT", auto.assign = FALSE, from = "1950-01-01") # 1987-09-10 forward
# getSymbols("^SP600", auto.assign = FALSE, from = "1950-01-01") # 1989-01-03
saveRDS(r2000daily, here::here("data", "russell2000_rawdaily.rds"))

## Aggressive Equity, Emerging Markets, NASDAQ, Hang Seng, 1984.12 – 2003.12 ----

# The hypothetical “Aggressive/Exotic Equity” index was constructed by blending
# returns for the NASDAQ, Emerging Markets and Hang Seng indices (weights are
# approximately 12.5%, 25% and 62.5% respectively). This proxy has an
# unconditional annualized volatility of approximately 25%. This market mix is
# not meant to suggest a representative asset profile for this class, but used
# merely to build an historic index with high volatility and sufficient history.

# NASDAQ:
# For the NASDAQ-100 Index, the ticker is QQQ:
# Invesco QQQ Trust is an ETF that tracks the NASDAQ-100 Index, which includes 100 of the largest non-financial companies listed on the NASDAQ stock exchange.
# For the broader NASDAQ Composite Index, there isn't a direct ETF because it includes over 3,000 stocks. However, the NASDAQ-100 (QQQ) is often used as a proxy due to its heavy technology and growth-oriented composition.

# MSCI Emerging Markets Index:
# ETF Ticker: EEM
# iShares MSCI Emerging Markets ETF is one of the most popular ETFs tracking the performance of the MSCI Emerging Markets Index. It includes large and mid-sized companies across emerging markets.

# Hang Seng Index:
# ETF Ticker: EWH
# iShares MSCI Hong Kong ETF tracks the investment results of an index composed of Hong Kong equities and is often used by investors to gain exposure to the Hong Kong market, broadly reflective of the Hang Seng Index dynamics.

getSymbols(c("QQQ", "EEM", "EWH"), auto.assign = TRUE, from = "1950-01-01") 
QQQ # 1999-03-10 forward
EEM # 2003-04-14 forward
EWH # 1996-03-18 forward
# Ad(QQQ)

combo <- merge(Ad(QQQ), Ad(EEM), Ad(EWH), all = FALSE) # adjusted close; drop missing
weights <- c(qqq=0.125, eem=0.25, ewh=0.625) 

aggrport <- combo |> 
  fortify() |> 
  tibble() |> 
  setNames(c("date", "qqq", "eem", "ewh")) |> 
  mutate(across(c(qqq, eem, ewh), \(x) log(x / lag(x)))) |> 
  filter(date > min(date)) |> 
  mutate(portret=qqq * weights["qqq"] + eem * weights["eem"] + ewh * weights["ewh"],
         portassets=exp(cumsum(portret))) # note that this is end of period assets
ht(aggrport)
  
saveRDS(aggrport, here::here("data", "aggressive_rawdaily.rds"))


```

## Prepare data for estimation

Create files with monthly prices and log returns.

```{r}
#| label: prep-data

# get previously downloaded and saved data

## prep Diversified Large Cap U.S. Equity ----
spdaily <- readRDS(here::here("data", "sp500_index_rawdaily.rds"))

usdiverse <- spdaily |> 
  to.monthly(OHLC=FALSE) |> 
  fortify.zoo() |> # to dataframe with Index from rowname
  tibble() |> 
  select(date=Index, price=GSPC.Adjusted) |> 
  # we can safely assume data are sorted by date
  mutate(date=ldom(as.Date(date)),
         vname="us", 
         src="sp500",
         lr=log(price / lag(price))) # note that we lose lr for the first observation

## prep Diversified International Equity ----
mscidaily <- readRDS(here::here("data", "msci_eafe_eaf_rawdaily.rds"))

intldiverse <- mscidaily |> 
  to.monthly(OHLC=FALSE) |> 
  fortify.zoo() |> # to dataframe with Index from rowname
  tibble() |> 
  select(date=Index, price=EFA.Adjusted) |> 
  # we can safely assume data are sorted by date
  mutate(date=ldom(as.Date(date)),
         vname="intl", 
         src="mscieafe",
         lr=log(price / lag(price))) # note that we lose lr for the first observation

## prep Intermediate Risk Equity, U.S. Small Capitalization Index, 1955.12 – 2003.12 ----
r2000daily <- readRDS(here::here("data", "russell2000_rawdaily.rds"))

intermediate_diverse <- r2000daily |> 
  to.monthly(OHLC=FALSE) |> 
  fortify.zoo() |> # to dataframe with Index from rowname
  tibble() |> 
  select(date=Index, price=RUT.Adjusted) |> 
  # we can safely assume data are sorted by date
  mutate(date=ldom(as.Date(date)),
         vname="small", 
         src="russell2000", # Russell 2000 ^RUT
         lr=log(price / lag(price))) # note that we lose lr for the first observation

## prep Aggressive Equity, Emerging Markets, NASDAQ, Hang Seng ----
aggrport <- readRDS(here::here("data", "aggressive_rawdaily.rds"))

aggressive <- aggrport |> 
  mutate(ldom=ldom(date)) |> 
  group_by(ldom) |> 
  filter(date==max(date)) |> 
  select(date=ldom, price=portassets) |> 
  ungroup() |>  
  mutate(vname="aggr", 
         src="portfolio", # Russell 2000
         lr=log(price / lag(price)))

# stack ----

stack <- bind_rows(usdiverse,
                   intldiverse,
                   intermediate_diverse,
                   aggressive)
count(stack, vname, src)
stack |> 
  filter(is.na(lr))

saveRDS(stack, here::here("data", "airg_equities.rds"))


```

## Estimate stochastic log volatility models

```{r}

stack <- readRDS(here::here("data", "airg_equities.rds"))
glimpse(stack)
ht(stack)

get_subset <- function(vname, start, end, data=stack){
  # get a time-period subset of the stacked data and demean the log returns
  # only keep the portion of the time-period subset that has values for the
  #   demeaned log returns
  start <- as.Date(start)
  end <- as.Date(end)
  vname <- "us"
  df <- data |> 
    filter(vname==!!vname, date >= start, date <= end) |> 
    filter(!is.na(lr)) |> 
    mutate(lrc=lr - mean(lr))
  df
}

get_subset("us", "2020-01-31", "2020-05-02")

runslv <- function(data, vname, start, end, modtype="leverage"){
  # get the demeaned log return from a data subset and estimate an slv model
  vec <- get_subset(vname, start, end, data)$lrc
  mod <- estimate_parameters(vec, model = modtype, silent = TRUE)
  mod
}

runslv(stack, "us", "2010-01-31", "2020-05-02")

# run the slv model on each asset, for a particular time period
res <- stack |> 
  nest(.by=vname) |> 
  mutate(mod=purrr::map(data, \(x) runslv(x, start="1950-01-01", end="2024-05-10")))
res

# get the model parameters
params <- res |> 
  mutate(summary=map(mod, \(x) summary(x, report="transformed") |> list()),
         nobs=map(mod, \(x) pluck(x, "nobs")) |> unlist(),
         params=map(summary, \(x) pluck(x, 1)))
params

# examine the model parameters
params |> 
  select(-c(data, mod, summary)) |> 
  unnest(params) |> 
  select(-type) |> 
  arrange(parameter, vname)

str(params$mod)

```
