---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Run investment-return results through a simple pension model

## Overview

-   Data preparation: Create a data tibble that has the following columns:

    -   scenario - string identifying the scenario in question

    -   nsims - integer giving the number of sims in the scenario

    -   nyears - integer giving the number of years in the scenario

    -   ir_matrix - list-column with matrix of annual log investment returns, with nsims rows and nyears columns

    Thus, the tibble will have one row per scenario.
    
-   Modeling: Create a result tibble that has the data and the results of running a simple pension model, called penmod, on each row of the tibble, creating a new list-column called penmod. The list-column  penmod has a nested tibble with pension results (e.g., assets, liability, payroll, funded ratio, etc.) for each sim and year within the given scenario. Thus, our result tibble has one row per scenario, with the same columns as before (scenario, nsims, nyears, a list-column called ir_matrix with a matrix of investment returns, and a list-column called penmod with a tibble of results.


The following code does this, using Gang's simple pension model, for some made-up data. Soon we'll replace the made-up data with results of ESG models and probability distributions.


## Setup

```{r}
#| label: setup
#| output: false

source(here::here("report", "_common.R"))

# get Gang's pension model, adapted to work with multiple simulations
source(here::here("report", "function_penmod.R")) 

```


## All portfolios and corresponding random normal

```{r}

# acliport <- readRDS(here::here("data", "acli_portfolios.rds"))

# portfolios <- readRDS(here::here("data", "acli_and_comparison_portfolios.rds"))

portfolios <- readRDS(here::here("data", "allscen_and_comparison_portfolios.rds"))


```


```{r}

result <- portfolios  |> 
  # next stament "loops" (via map) through the 3 rows (the 3 scenarios), and for each row it
  # calls penmod using nsims, nyears, and the investment return matrix for the scenario in the row
  mutate(penmod = 
           purrr::map(seq_along(lrmat),
                      ~penmod(
                        ir = lrmat[[.x]])))
result

saveRDS(result, here::here("data", "allscen_and_comparison_penmod.rds"))


```




