---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Simple stochastic log volatility models


## Setup

```{r}
#| label: setup
#| output: false

source(here::here("report", "_common.R"))
source(here::here("report", "libraries_ts.R"))
source(here::here("report", "function_penmod.R")) # for flatmat

library(quantmod)
library(stats4)
library(stochvolTMB)
library(stochvol)

# options(pillar.sigfig = 3) # default
options(pillar.print_max = 20)
tprint <- 25  # default tibble print
options(tibble.print_max = tprint, tibble.print_min = tprint) # show up to tprint rows


```


```{r}
#| label: functions-for-slv-models

get_subset <- function(vname, start, end, data=stack){
  # get a time-period subset of the stacked data and demean the log returns
  # only keep the portion of the time-period subset that has values for the
  #   demeaned log returns
  start <- as.Date(start)
  end <- as.Date(end)
  vname <- "us"
  df <- data |> 
    filter(vname==!!vname, date >= start, date <= end) |> 
    filter(!is.na(lr)) |> 
    mutate(lrc=lr - mean(lr))
  df
}
# get_subset("us", "2020-01-31", "2020-05-02")

runslv <- function(data, vname, start, end, modtype="leverage"){
  # get the demeaned log return from a data subset and estimate an slv model
  # data must have vname, date, and lr columns
  vec <- get_subset(vname, start, end, data)$lrc
  mod <- estimate_parameters(vec, model = modtype, silent = TRUE)
  mod
}
# runslv(stack, "us", start="1950-01-01", end="2024-05-10")


```


## SLV models for a 2-asset portfolio

Get assets needed to construct two equity-bonds portfolios: 70-30 and 30-70.

```{r}
#| label: get-assets
#| eval: false
#| output: false

# MSCI All Country World Index (ACWI): This index captures large and mid-cap
# representation across 23 Developed Markets and 24 Emerging Markets countries,
# covering approximately 85% of the global investable equity opportunity set.

# FTSE Global All Cap Index: This index measures the performance of large, mid,
# and small cap stocks globally, covering over 7,400 securities in 47 countries,
# including both developed and emerging markets.

# The iShares Core U.S. Aggregate Bond ETF seeks to track the investment results of an index composed of the total U.S. investment-grade bond market.

equity <- getSymbols("^GSPC", auto.assign = FALSE, from = "1950-01-01") # 1950-01-03 forward
bonds <- getSymbols("AGG", auto.assign = FALSE, from = "1950-01-01") # 2003-09-29

combo2 <- merge(Ad(equity), Ad(bonds), all = FALSE) # adjusted close; drop missing

# establish portfolio weights ----
highequity_weights <- c(equity=.7, bonds=.3)
highbonds_weights <- c(equity=.3, bonds=.7) 

# calculate log returns and cumulative assets for high-equity and high-bonds portfolios ----
aggrport2 <- combo2 |> 
  fortify() |> 
  tibble() |> 
  setNames(c("date", "equity", "bonds")) |> 
  arrange(date) |> 
  mutate(across(c(equity, bonds), \(x) log(x / lag(x)))) |> 
  filter(date > min(date)) |> 
  mutate(equity_portret= equity * highequity_weights["equity"] + bonds * highequity_weights["bonds"],
         equity_portassets=exp(cumsum(equity_portret)),
         bonds_portret= equity * highbonds_weights["equity"] + bonds * highbonds_weights["bonds"],
         bonds_portassets=exp(cumsum(bonds_portret))) # note that this is end of period assets
ht(aggrport2)

saveRDS(aggrport2, here::here("data", "simportfolios_rawdaily.rds"))

# take a look
# tmp <- readRDS(here::here("data", "simportfolios_rawdaily.rds"))
# ht(tmp)

```

## Prepare data for model estimation


```{r}
#| label: prepare-data
#| output: false

# get previously saved assets and construct log returns ----
port_monthly1 <- readRDS(here::here("data", "simportfolios_rawdaily.rds"))

port_monthly <- port_monthly1 |> 
  mutate(ldom=ldom(date)) |> 
  group_by(ldom) |> 
  filter(date==max(date)) |> 
  select(date=ldom, eqprice=equity_portassets, bondprice=bonds_portassets) |> 
  ungroup() |>  
  mutate(vname="simport", 
         src="portfolio",
         highequity=log(eqprice / lag(eqprice)),
         highbonds=log(bondprice / lag(bondprice)))

port_monthly

data <- port_monthly |> 
  select(date, highequity, highbonds) |> 
  pivot_longer(cols=c(highequity, highbonds), names_to = "vname", values_to = "lr") |> 
  arrange(vname, date)
data
summary(data)

```

## Estimate 4 SLV models, each for 2 portfolios, and recover parameters

Estimate 4 models using estimate_parameters from stochvolTMB.

The four models are:

-   Gaussian distribution -- normal
-   t-distribution -- heavy tails
-   Skew gaussian distribution -- skewness parameter alpha
-   Leverage: Gaussian distribution with leverage -- volatility correlated with returns via rho


See [stochvolTMB: Likelihood estimation of stochastic volatility](https://cran.r-project.org/web/packages/stochvolTMB/vignettes/stochvolTMB_vignette.html)


```{r}
#| label: estimate-slv-simple

# run the slv model on each portfolio for all available periods
# data must have vname, date, and lr columns
# get_subset

# estimate 4 models ----
res2 <- data |> 
  nest(.by=vname) |> 
  mutate(
    gaussmod=purrr::map(data, \(x) runslv(x, start="2003-09-30", end="2024-04-30", 
                                          modtype="gaussian")),
    tmod=purrr::map(data, \(x) runslv(x, start="2003-09-30", end="2024-04-30", 
                                      modtype="t")),
    levmod=purrr::map(data, \(x) runslv(x, start="2003-09-30", end="2024-04-30",
                                        modtype="leverage")),
    skewmod=purrr::map(data, \(x) runslv(x, start="2003-09-30", end="2024-04-30",
                                         modtype="skew_gaussian"))
    )
res2


# get the model parameters ----
params2 <- res2 |> 
  pivot_longer(cols=contains("mod"), names_to = "modtype", values_to = "mod") |> 
  mutate(summary=map(mod, \(x) summary(x, report="transformed") |> list()),
         nobs=map(mod, \(x) pluck(x, "nobs")) |> unlist(),
         aic=map(mod, \(x) AIC(x)) |> unlist(),
         params=map(summary, \(x) pluck(x, 1)))
# params2
params2 |> arrange(vname, aic)
params2 |> unnest(params) |> arrange(vname, parameter, modtype)
params2 |> unnest(params) |> arrange(vname, modtype, parameter)

saveRDS(list(res2=res2, params2=params2), here::here("data", "slv_model_results.rds"))

```


## Predict 10,000 simulations from each of the 8 models

```{r}
#| label: slv-predict

# predict and convert to annual, for input to pension model


# m1 <- res2 |> filter(vname=="highbonds") |> pull(gaussmod)
# m2 <- res2 |> filter(vname=="highbonds") |> pull(tmod)
# m3 <- res2 |> filter(vname=="highbonds") |> pull(levmod)
# m4 <- res2 |> filter(vname=="highbonds") |> pull(skewmod)
# 
# 
# pred2 <- predict(m1[[1]], steps = 360, nsim = 10000, include_parameters = TRUE)
# class(pred2)
# names(pred2)
# str(pred2)

# pm1 <- simulate_parameters(m1[[1]], nsim = 1000) # get 1000 sets of parameters
modlist <- readRDS(here::here("data", "slv_model_results.rds"))
res2 <- modlist$res2
params2 <- modlist$params2

nmonths <- 360; nsims <- 10000

# nmonths <- 36; nsims <- 100


sims <- params2 |>
  filter(!(modtype=="tmod" & vname=="highbonds")) |> # error 'Sigma' is not positive definite
  select(vname, modtype, mod) |> 
  mutate(pred=purrr::map(mod,
                         \(x) predict(x, steps=nmonths, nsim = nsims,
                                      include_parameters = TRUE)),
         y=purrr::map(pred, \(x) pluck(x, "y") |> t()))
sims

saveRDS(sims, here::here("data", "slvsims_sims_by_months.rds"))

# tmp <- sims |> 
#   filter(row_number()==1) |> 
#   mutate(yt=map(y, \(x) t(x)))
#   pull(y)


# str(sims$pred[1])
# tmp <- sims |>   mutate(y=purrr::map(pred, \(x) pluck(x, "y")))

# str(tmp$y[1])

# sim_sv(
#   param = list(phi = 0.9, sigma_y = 0.4, sigma_h = 0.2, df = 4, alpha = -2, rho = -0.7),
#   nobs = 1000L,
#   seed = NULL,
#   model = "gaussian"
# )

# sim_sv(
#   param = list(phi = 0.9, sigma_y = 0.4, sigma_h = 0.2, df = 4, alpha = -2, rho = -0.7),
#   nobs = 1000L,
#   seed = NULL,
#   model = "gaussian"
# )


```


## Collapse to 30 years


```{r}

# function to create a matrix of sims x years from matrix of sims x months
# Example matrix with 100 rows and 36 columns

f <- function(mat, period=3){
  # collapse a matrix of arbitary number of columns to a new matrix with the same
  # number of rows but where each column is the sum of period columns
  # for example, if the matrix has 360 columns and period=12 the result will be 
  # a matrix with 30 columns, each of which is the sum of 12 columns
  # it uses R's fast built-in rowsum function combined with a group vector
  # because there is not a corresponding colsum function (which is what we really want)
  # we transpose, use rowsum, and transpose the result back
  # reuse mat to avoid unnecessary memory use
  mat <- t(mat)
  nnewrows <- nrow(mat) / period
  group <- rep(1:nnewrows, each=period)
  # group gives the new-column index that each old column will be summed into
  mat <- rowsum(mat, group)
  t(mat)
}

# (mat <- matrix(1:24, nrow=3, byrow = TRUE))
# (newmat <- f(mat, period=4))
# sum(mat); sum(newmat)
# 
# mat <- matrix(runif(10e3 * 360), nrow = 10e3, ncol = 360)
# newmat <- f(mat, period=12)
# sum(mat); sum(newmat)

```


```{r}

# collapse to 30 years
sims <- readRDS(here::here("data", "slvsims_sims_by_months.rds"))
# glimpse(sims)
# dim(sims)

# pare it down and delete what we don't need - sims is very slow
slv_sims <- sims |> 
  select(vname, modtype, y) |> 
  mutate(lrmat=map(y, \(x) f(x, period=12)))
slv_sims

saveRDS(slv_sims |> select(vname, modtype, lrmat), 
        here::here("data", "slvsims.rds"))


```



