---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Prepare for apples-to-apples comparisons

For every slv model scenario and portfolio, create a corresponding random-normal scenario with the same mean and standard deviation over the simulated number of years and simulations.

Repeat for every ACLI scenario and portfolio.


This will allow head-to-head comparison for each scenario-portfolio combination.

## Setup

```{r}
#| label: setup
#| output: false

source(here::here("report", "_common.R"))
source(fs::path(rptdir, "function_penmod.R")) # for flatmat

```


## Prepare constant and random normal comparisons

Construct constant returns and random normals corresponding to each scenario-portfolio combination.

The constant matrix has a constant log return equal to the mean of the ACLI scenario.

The random normal matrix has a mean and sd equal to the mean and sd of the ACLI scenario.

Save the results as a tibble with list columns, for ease of understanding.

```{r}
#| label: functions
#| output: false

get_normal <- function(meanreturn, sdreturn, nsims, nyears, seed=12){
  # ensure that we hit the desired mean and sd exactly
  set.seed(seed)
  irnorm <- rnorm(n = nsims * nyears) # N(0, 1)
  # standardize to hit the targets
  irnorm <- (irnorm - mean(irnorm)) / sd(irnorm) # standardize to exactly mean 0, sd 1
  irnorm <- irnorm * sdreturn + meanreturn # adjust to target mean, target sd
  irnorm <- irnorm |> matrix(nrow = nsims, ncol = nyears) # convert to matrix
  return(irnorm)
}


```


## SLV simulations and normals


```{r}
#| label: get-slvsims
#| output: false

slv_sims <- readRDS(here::here("data", "slvsims.rds"))
slv_sims
glimpse(slv_sims)
count(slv_sims, vname)
count(slv_sims, modtype)
count(slv_sims, vname, modtype) # missing highfixed, tmod

slv_sims |> 
  filter(vname=="highequity", modtype=="gaussmod") |> 
  unnest(lrmat)
  
```


# get the acli baseline run portfolio means
```{r}
#| label: get-acli-mean-logreturns
#| output: false


df <- readRDS(here::here("data", "acli_portfolios.rds"))

acli_means <- df |> 
  filter(scenario=="baseline", year>0) |> 
  summarise(lr=mean(logreturn), .by=porttype)

acli_means

```


```{r}
#| label: get-slvsims-normals
#| output: false

# enhance with a constant matrix and a random normal matrix
# modorder <- c("acli, constant", "rnormal")

mean_annual_logreturn_highequity <- .0625 # same as highequity acli portfolio
mean_annual_logreturn_highfixed <- 0.0499 # same as highfixed acli portfolio

c(mean_annual_logreturn_highequity, acli_means$lr[acli_means$porttype=="highequity"]) |> round(4)
c(mean_annual_logreturn_highfixed, acli_means$lr[acli_means$porttype=="highfixed"]) |> round(4)

  # mutate(slv=map(lrmat, \(x) x + mean_annual_logreturn_hiequity)) |>  # add target mean annual log return to innovations
slv2 <- slv_sims |> 
  rename(porttype=vname, scenario=modtype) |> # djb used to say slv=lrmat -- why??
  group_by(porttype, scenario) |> 
  mutate(model=map(lrmat, \(x) x + ifelse(porttype=="highequity",
                                        mean_annual_logreturn_highequity,
                                        mean_annual_logreturn_highfixed))) |>  # add target mean annual log return to innovations
  # base stats on the targeted return, not the raw innovations
  select(-lrmat) |> 
  mutate(nsims=map(model, \(x) nrow(x)) |> pluck(1),
         nyears=map(model, \(x) ncol(x)) |> pluck(1),
         mean_model=map(model, \(x) mean(x)) |> pluck(1),
         sd_model=map(model, \(x) sd(x)) |> pluck(1)) |> 
  mutate(
    constant=matrix(data=mean_model, nrow=nsims, ncol=nyears) |> list(),
    rnormal=get_normal(mean_model, sd_model, nsims, nyears, seed=1234) |> list()) |> 
  pivot_longer(c(model, constant, rnormal),
               names_to = "modtype",
               values_to = "lrmat") |> # lrmat for log returns matrix
  group_by(scenario, porttype, modtype) |> 
  mutate(mean=mean(unlist(lrmat)),
         sd=sd(unlist(lrmat))) |> 
  select(scenario, porttype, modtype, 
         nsims, nyears, mean, sd, mean_model, sd_model, lrmat) |> 
  arrange(scenario, porttype, modtype) |> 
  ungroup()

slv2  
  
saveRDS(slv2, here::here("data", "slv_and_comparison_portfolios.rds"))

```


## ACLI portfolio comparison returns

```{r}
#| label: get-acli-portfolios
#| output: false

acli <- readRDS(here::here("data", "acli_portfolios.rds"))
glimpse(acli)
count(acli, scenario)
count(acli, porttype)

```


```{r}
#| label: get-acli-normals
#| output: false

port1 <- acli |> 
  filter(year > 0) |> 
  arrange(scenario, porttype, sim, year) |> 
  group_by(scenario, porttype) |> 
  summarise(nsims=length(unique(sim)),
            nyears=length(unique(year)),
            mean_model=mean(logreturn),
            sd_model=sd(logreturn),
            model=matrix(logreturn, 
                         nrow=length(unique(sim)),
                         ncol=length(unique(year)),
                         byrow=FALSE) |>
              list(),
            .groups="drop")

port1

# enhance with a constant matrix and a random normal matrix
# modorder <- c("acli, constant", "rnormal")

port2 <- port1 |> 
  group_by(scenario, porttype) |> 
  mutate(
    constant=matrix(data=mean_model, nrow=nsims, ncol=nyears) |> list(),
    rnormal=get_normal(mean_model, sd_model, nsims, nyears, seed=1234) |> list()) |> 
  pivot_longer(c(model, constant, rnormal),
               names_to = "modtype",
               values_to = "lrmat") |> # lrmat for log returns matrix
  group_by(scenario, porttype, modtype) |> 
  mutate(mean=mean(unlist(lrmat)),
         sd=sd(unlist(lrmat))) |> 
  select(scenario, porttype, modtype, nsims, nyears, mean, sd, mean_model, sd_model, lrmat) |> 
  arrange(scenario, porttype, modtype) |> 
  ungroup()

port2  
  
saveRDS(port2, here::here("data", "acli_and_comparison_portfolios.rds"))


```


## Combine all scenarios
```{r}
#| label: all-scenarios
#| output: false

slv_scen <- readRDS(here::here("data", "slv_and_comparison_portfolios.rds"))
acli_scen <- readRDS(here::here("data", "acli_and_comparison_portfolios.rds"))

all_scen <- bind_rows(slv_scen |> mutate(framework="slv"),
                      acli_scen |> mutate(framework="acli")) |> 
  relocate(framework)

saveRDS(all_scen, here::here("data", "allscen_and_comparison_portfolios.rds"))

all_scen <- readRDS(here::here("data", "allscen_and_comparison_portfolios.rds"))

head(all_scen)
count(all_scen, modtype)

all_scen |> 
  filter(modtype %in% c("model")) |>
  filter(scenario != "tmod") |> 
  # mutate(lab=paste0(porttype, "-", modtype, "-", scenario)) |>
  mutate(lab=paste0(modtype, "-", scenario)) |> 
  ggplot(aes(mean_model, sd_model, colour = lab)) +
  geom_point() +
  geom_text_repel(aes(label=lab)) +
  scale_x_continuous(breaks=seq(.01, .10, by=.005)) +
  scale_y_continuous(breaks=seq(.01, .20, by=.005)) +
  facet_wrap(~porttype, ncol = 1, scales = "free")

```



## Show the resulting tibble

Note that:

-   mean and sd are the values calculated from the matrix lrmat (log returns matrix)
-   mean_model and sd_model are the mean and sd from the ACLI model that we are trying to match
-   mean should always equal mean_model, possibly with very small differences
-   sd should equal sd_model for the rnormal (random normal) matrix, and be 0 for the constant matrix

```{r}

all_scen <- readRDS(here::here("data", "allscen_and_comparison_portfolios.rds"))

all_scen


```



