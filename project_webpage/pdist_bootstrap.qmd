---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Bootstrapping investment returns from history

We do the following:

-   Calculate annual investment returns for an optimal long-only portfolio based on historical data for 1950-2022 (see the prior historical analysis)

-   Construct 1,000 block bootstrapped samples from this portfolio; by default these will have almost the same length as the sample

-   Randomly select 1,000 starting years so that we can have 50-year samples

-   Calculate mean and sd and construct comparable normal distribution



```{r}
#| label: includes
#| include: false

source(here::here("r", "libraries.r"))
source(here::here("r", "libraries_ts.r"))
source(here::here("r", "constants.r"))
source(here::here("r", "functions.r"))

```


```{r}
#| label: load-data
#| include: false

returns <- readRDS(here::here("data", "damodaran_data.rds"))
efflist <- readRDS(here::here("data", "eff_history.rds")) # efficient frontier, 1950-2022

analysis_years <- 1950:2022

```


```{r}
#| label: eff-portfolios
#| include: false

# find asset weights for the efficient portfolio that has return closest to the 50-50 portfolio
(return_5050 <- returns |> 
  filter(year %in% analysis_years) |> 
  mutate(port5050=.5 * sp500 + .5 * baacorp) |> 
  pull(port5050) |> 
  mean())

# find the index in the tibble of efficient portfolios for portfolio that has return
# closest to the 5050 return
i5050 <- iclosest(return_5050, efflist$effdf$mean)

# get weights for the efficient portfolio closest to the 5050 portfolio
(w5050 <- efflist$effdf |> 
  filter(obs == i5050) |> 
  rename_with(.fn= ~str_remove(.x, "w."), .cols=starts_with("w.")) |> 
  mutate(across(c(sp500, tbill3, ustbond, baacorp, realestate, gold),
                ~ .x * (abs(.x) > 1e-12)))) # force weights to be at least 1e-12, else zero

```


```{r}
#| label: build-portfolios
#| include: false

effport <- returns |> 
  mutate(porteff5050=w5050$sp500 * sp500 +
           w5050$tbill3 * tbill3 +
           w5050$ustbond * ustbond +
           w5050$baacorp * baacorp +
           w5050$realestate * realestate +
           w5050$gold * gold)

# create the time series we want
(rts <- ts(effport |> filter(year %in% 1950:2022) |> select(porteff5050)))

```


```{r}
#| label: get-bootstrap
#| include: false

set.seed(constants$seed)
nsims <- 1000
nyears <- 50
mebs <- meboot(rts, reps = nsims)
str(mebs)
head(mebs$x); head(rts)
m1 <- mebs$ensemble
dim(m1)

# get random start years
(maxstart <- nrow(m1) - 50 + 1) # the latest year we can start in
starts <- sample(1:maxstart, nsims, replace=TRUE)

# create a new submatrix with nyears rows for each column, starting in the random year
f <- function(i, m){
  m[starts[i]:(starts[i] + 49), i]
}
# ncols <- 4
(ncols <- ncol(m1))
ml <- purrr::map(1:ncols, f, m1) # create a list
m2 <- matrix(unlist(ml), ncol=ncols, byrow=FALSE)  # convert the list to a matrix

# check
col <- 9; starts[col]; m1[starts[col]:(starts[col] + 3), col]; ml[[col]]; m2[, col]

# transpose the matrix and save
m <- t(m2)
dim(m)
saveRDS(m, here::here("data", "hist_bstrap_50k.rds"))


mean(m)
sd(m)



```


```{r}
#| label: plot
#| include: true

ir <- readRDS(here::here("data", "hist_bstrap_50k.rds"))


#create histogram and overlay normal curve
title1 <- paste0(f_comma(length(ir)), " bootstrapped historical investment returns from efficient long portfolio")

title2 <- paste0("Mean ",
                 f_pct(mean(ir), accuracy=.1),
                 " and standard deviation ",
                 f_pct(sd(ir), accuracy=.1),
                 ". Overlaid normal curve has same mean and standard deviation.")

tibble(ir=c(ir)) |> 
  ggplot(aes(x=ir)) +
  geom_histogram(aes(y = after_stat(density)), bins=30, fill='lightblue', col='grey90') +
  stat_function(fun = dnorm, args = list(mean=mean(ir), sd=sd(ir)), col="black") +
  labs(x="investment return", y="density") +
  scale_x_continuous(breaks=c(seq(-10, 10, .1), mean(ir)), labels = scales::label_percent(accuracy=.1),
                     limits=c(-.6, .6)) +
  geom_vline(xintercept = mean(ir)) +
  ggtitle(title1,
          subtitle=title2) +
  theme_bw(base_size = 11) # 11 is default


```




### q-q plot to show behavior in the tails more clearly


```{r}
#| label: q-q-plot
#| include: true

title1 <- paste0("q-q plot of ", f_comma(length(ir), accuracy=1), " bootstrapped historical investment returns")
title2 <- paste0("Mean ",
                 f_pct(mean(ir), accuracy=.1), 
                 " and standard deviation ", f_pct(sd(ir), accuracy=.1))
# title1
# title2
# 
# quantile(ir, probs = c(0, 0.01, 0.05, 0.10, 0.25, 0.5, 0.75, 0.90, 0.95, 0.99, 1))

p <- tibble(sample=c(ir)) |> 
  ggplot(aes(sample=sample)) +
  stat_qq_line() + 
  stat_qq(colour="blue", size=0.75) +
  geom_hline(yintercept = 0) +
  geom_hline(yintercept = mean(ir), linetype="dashed") +
  geom_vline(xintercept = 0) +
  scale_x_continuous(name="theoretical quantiles for standard normal distribution",
                     breaks=seq(-4, 4, 0.5),
                     labels=label_number(accuracy=0.1)) +
  scale_y_continuous(breaks=c(seq(-2, 2, .05), mean(ir)),
                     labels=label_percent(accuracy=0.1)) +
  ggtitle(label = title1, subtitle = title2) +
  theme_bw(base_size = 11)

p


```







