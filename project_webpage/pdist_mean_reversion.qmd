---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Investment returns correlated over time

<!-- A multivariate normal distribution with returns correlated over time, parameterized by mean, standard deviation, and a correlation matrix. -->


```{r}
#| label: includes
#| include: false

source(here::here("r", "libraries.r"))
source(here::here("r", "libraries_ts.r"))
source(here::here("r", "constants.r"))
source(here::here("r", "functions.r"))

```


```{r}
#| label: parameters
#| include: false

# Define parameters
ir_mean_target <- 0.07
ir_sd_target <- 0.10

ir_phi_target <- -0.20  # the coefficient on AR(1) term

nyears <- 50  # number of years to simulate
nsims <- 1000

```



```{r}
#| label: functions
#| include: false

# get the median phi for a bunch of these matrices
get_mdn_phi <- function(mat){
  get_phi <- function(row, mat){
    # get phi for a single row
    ar(mat[row, ], aic=FALSE, order.max = 1)$ar # Yule-Walker method biased in small samples
    # using arima is slower and doesn't seem as good
    # ar_model <- arima(mat[row, ], order = c(1,0,0), method = "ML")
    # ar_model$coef[1]
  }
  phis <- map_dbl(1:nrow(mat), get_phi, mat)
  median(phis)
}

# get_mdn(m)

seed_phis <- function(seed){
  # get a matrix of mean-reverting row vectors
  mat <- mr_mat(seed, nyears, nsims, ir_phi_target,
                   ir_mean_target, ir_sd_target)
  # keep just the seed and median phi value 
  tibble(seed=seed, phi=get_mdn_phi(mat))
}

```


```{r}
#| label: ONETIME-bestseed
#| eval: false
#| include: false

# This takes a while so run in advance and save results

system.time(df <- map_dfr(1:1000, seed_phis, .progress=TRUE))
quantile(df$phi)
skim(df)
saveRDS(df, here::here("data", "meanrevert_samples_50k.rds"))

df |> filter(row_number()==iclosest(value=ir_phi_target, vec=phi))

best_results <- df |> filter(row_number()==iclosest(value=!!phi, vec=phi))
(bestseed <- best_results$seed)

m <- mr_mat(bestseed, nyears, nsims, ir_phi_target,
                   ir_mean_target, ir_sd_target)
mean(m); sd(m)
quantile(colMeans(m))
apply(m, 2, sd)


```


```{r}
#| label: get-best
#| eval: true
#| include: false

df <- readRDS(here::here("data", "meanrevert_samples_50k.rds"))

best_results <- df |> filter(row_number()==iclosest(value=ir_phi_target, vec=phi))
(bestseed <- best_results$seed)


m <- mr_mat(bestseed, nyears, nsims, ir_phi_target,
                   ir_mean_target, ir_sd_target)
# dim(m)
# mean(m)
# sd(m)
# quantile(m)
# quantile(colMeans(m))
# apply(m, 1, mean)
# apply(m, 1, sd)
# ar(m[2, ], aic=FALSE, order.max = 1)$ar
# phis <- apply(m, 1, (\(x) ar(x, aic=FALSE, order.max = 1)$ar))
# median(phis)

```

For each scenario, in each simulation, phi is estimated using R's `ar()` function, which uses the Yule-Walker method, which is fast but known to be biased in small samples although the direction of bias can depend on the data. I have experimented with `arima(order=c(1,0,0))` which allows maximum likelihood and other methods. However, it is slower and not clearly better than `ar()`.

```{r}
#| label: phi-distribution
#| eval: true
#| include: true

df <- readRDS(here::here("data", "meanrevert_samples_50k.rds"))
# glimpse(df)

title1 <- paste0("Median phi for each of ",
                 f_comma(nrow(df)), " samples. Each sample has 1,000 simulations of 50 years of mean-reverting investment returns")

title2 <- paste0("Target value for phi = ", f_comma(ir_phi_target, accuracy=0.01))

df |> 
  ggplot(aes(phi)) +
  geom_histogram(fill = "lightblue", color = "black") +
  scale_x_continuous(breaks=seq(-1, 1, .005)) +
  geom_vline(xintercept = ir_phi_target) +
  ggtitle(title1,
          subtitle=title2) +
  theme_bw()


```


```{r}
#| label: qqplot-best
#| eval: true
#| include: true

subt <- paste0(
  "mean: ", f_pct(mean(m), accuracy=.1),
  ", standard deviation: ", f_pct(sd(m), accuracy=.1),
  ", median phi: ", f_comma(best_results$phi, accuracy=0.01),
  "")
# subt  

p <- tibble(ir=c(m)) |> 
  ggplot(aes(sample=ir)) +
  stat_qq_line() + 
  stat_qq(colour="blue", size=0.75) +
  geom_hline(yintercept = 0) +
  geom_hline(yintercept = ir_mean_target, linetype="dashed") +
  geom_vline(xintercept = 0) +
  scale_x_continuous(breaks=seq(-4, 4, 0.5),
                     labels=label_number(accuracy=0.1)) +
  scale_y_continuous(breaks=c(seq(-1, 1, .05), ir_mean_target),
                     labels=label_percent(accuracy=0.1)) +
  ggtitle(label = "qqplot of mean-reverting returns", subtitle = subt) +
  theme_bw()
p

```



```{r}
#| label: tsplot-sim
#| eval: true
#| include: true

df1 <- as_tibble(m) |>
  mutate(sim=row_number()) |>
  pivot_longer(-sim, names_to = "year", values_to = "ir") |>
  mutate(year=str_remove(year, "V") |> as.integer())
# glimpse(df1)
# skim(df1)
# count(df1, year)
# count(df1, sim) |> ht()

simnum <- sample.int(nsims, 1)

df2 <- df1 |> 
  filter(sim==simnum) 

subt <- paste0(
  "mean: ", f_pct(mean(df2$ir), accuracy=.1),
  ", standard deviation: ", f_pct(sd(df2$ir), accuracy=.1),
  ", phi: ", f_comma(fphi(df2$ir), accuracy=0.01),
  ", simnum: ", f_comma(simnum, accuracy=1),
  "")

# slice_sample(.data, ..., n, prop, by = NULL, weight_by = NULL, replace = FALSE)


df2 |> 
  # slice_sample(n=1) |> 
  ggplot(aes(year, ir)) +
  geom_line(colour="blue") +
  geom_point(colour="blue") +
  geom_hline(yintercept = 0) +
  geom_hline(yintercept = ir_mean_target, linetype="dashed") +
  ggtitle("Annual returns from a random mean reverting simulation in a simulation set",
          subtitle=subt) +
  theme_bw(base_size = 11)


```

